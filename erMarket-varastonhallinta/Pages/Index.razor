@page "/"
@inject IJSRuntime JS;

<link href="css/style.css" rel="stylesheet" />

<div class="container">
    <div class="row p-2">
        <div class="col-sm text-nowrap">
            <div class="text-left" id="company">erMarket</div>
        </div>
        <div class="col-md-auto">
            <div class="text-nowrap" id="title">Varastonhallinta</div>
        </div>
        <div class="col-md d-flex d-inline align-self-center justify-content-md-end text-nowrap">
            <div class="d-flex d-inline">
                <img class="flags" src="finnish.png" alt="FI" />
                <div>&emsp;</div>
                <img class="flags" src="english.png" alt="EN" />
                <div>&emsp;</div>
                <img id="pagecolor" src="darkmode.png" alt="Light/Dark" />
            </div>
        </div>
    </div>

    <div class="row pt-4">
        <div class="col text-center">
            Valitse myymälä, minkä tietoja haluat katsella tai muuttaa.
        </div>
    </div>

    <div class="row d-flex justify-content-center">
        @if (stores != null)
        {
            @foreach (Store s in stores)
            {
                <div class="col-auto py-3">
                    <button type="button" class="stores btn-primary" value="@s.Id" @onclick="(() => SelectedStore(s.Id))">@s.City</button>
                </div>
            }
        }
        <div class="col-auto py-3">
            <button type="button" class="stores btn-info">Muutosloki</button>
        </div>
    </div>

    @if (displayedInfo != null)
    {
        <h5>@displayedInfo.City</h5>
        <div class="row py-2 text-nowrap">
            <div class="col-sm-3">Osoite:</div>
            <div class="col-sm">@displayedInfo.Address</div>
        </div>
        <div class="row py-2 text-nowrap">
            <div class="col-sm-3">Esimies:</div>
            <div class="col-sm">@displayedInfo.Supervisor</div>
        </div>
        <div class="row py-2 text-nowrap">
            <div class="col-sm-3">Puhelin:</div>
            <div class="col-sm">@displayedInfo.Phone</div>
        </div>
        <div class="row py-2 text-nowrap">
            <div class="col-sm-3">Sähköposti:</div>
            <div class="col-sm">@displayedInfo.Email</div>
        </div>

        <div class="row d-flex justify-content-center">
            <div class="col-auto py-3">
                <button type="button" class="useractions btn-secondary" @onclick="(() => ChangeAction(0))">Tarkemmat tiedot</button>
            </div>
            <div class="col-auto py-3">
                <button type="button" class="useractions btn-secondary" @onclick="(() => ChangeAction(1))">Selaa tuotteita</button>
            </div>
            <div class="col-auto py-3">
                <button type="button" class="useractions btn-secondary" @onclick="(() => ChangeAction(2))">Lisää uusi tuote</button>
            </div>
        </div>

        // Additional Info.
        @if (action == 0)
        {
            if (displayedInfo.Products.Count > 0)
            {
                <div class="container">
                    <canvas id="myChart1"></canvas>
                </div>

                <div class="container">
                    <canvas id="myChart2"></canvas>
                </div>
            }

            else
            {
                <div class="row">
                    <div class="col">Myymälässä ei ole tuotteita.</div>
                </div>
            }

        }

        // Browse products.
        else if (action == 1)
        {
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Tuotteen nimi</th>
                            <th scope="col">Määrä varastossa</th>
                            <th scope="col">Määrä muuttunut</th>
                            <th scope="col">Tuoteryhmät</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (displayedInfo.Products != null && displayedInfo.Products.Any())
                        {
                            foreach (Product product in displayedInfo.Products)
                            {
                                <tr>
                                    <td>@product.Name</td>
                                    <td>
                                        <div class="d-flex align-content-center">
                                            <div>@product.InStock&thinsp;</div>
                                            <input type="number" id="@displayedInfo.City+@product.Id" min="0" max="9999" step="1" style="width: 80px;" class="form-control-sm" />&thinsp;
                                            <button class="productbutton productbuttonsubmit" @onclick="(() => TakeNewValue(displayedInfo.City, product.Id, product.Name))">Muuta</button>
                                        </div>
                                    </td>
                                    <td>@product.QuantityChanged.Date.ToShortDateString()</td>
                                    <td>
                                        <select class="form-control-sm">
                                            @foreach (ProductCategory category in product.Groups)
                                            {
                                                <option>@category.Name</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <img src="close.png" id="deleteproduct" @onclick="(() => RemoveProduct(displayedInfo.Id, product.Id))" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }

        // Add new product.
        else if (action == 2)
        {
            <h5>Lisää uusi tuote</h5>
            <form>
                <div class="row">
                    <div class="col-md-6 py-2">
                        <label for="productName">Tuotteen nimi</label>
                        <input type="text" @bind="newProductName" id="productName" class="form-control" />
                    </div>
                    <div class="col-md py-2">
                        <label for="amount">Lisättävä kappalemäärä</label>
                        <input type="number" @bind="newProductQuantity" id="amount" style="width: 180px;" class="form-control" />
                    </div>
                </div>
                <div>Valitse tuoterymät</div>
                <div class="row text-nowrap">
                    @foreach (ProductCategory category in categories)
                    {
                        <div class="col-sm-6 py-2">
                            <input type="checkbox" @onchange="EventArgs => CheckboxClicked(category, EventArgs.Value)" id="@category.Id" name="@category.Name" />
                            <label for="@category.Id">@category.Name</label>
                        </div>
                    }
                </div>
                <input type="button" @onclick="AddNewProduct" class="btn-primary" value="Lisää tuote" />
                <div class="py-3"></div>
            </form>
        }

        // Error case. Only for testing.
        else
        {
            throw new Exception();
        }
    }



</div>

@code
{
    static List<ProductCategory> categories = new List<ProductCategory>();
    List<Store> stores = new List<Store>();
    Store displayedInfo = null;
    int action = 0;
    int newValue = 0;

    string newProductName;
    string newProductQuantity;
    List<ProductCategory> newProductCategories = new List<ProductCategory>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllStores();
        await GetAllCategories();
    }

    private async Task GetAllStores()
    {
        HttpClient Http = new HttpClient();
        var response = await Http.GetAsync("http://localhost:54859/api/getstorenames");

        if (response.StatusCode == HttpStatusCode.OK)
        {
            stores = await response.Content.ReadAsAsync<List<Store>>();
        }

        else if (response.StatusCode == HttpStatusCode.NoContent)
        {
            // If there are no stores.
        }

        // Error case. Only for testing.
        else
        {
            throw new Exception();
        }
    }

    private async Task GetAllCategories()
    {
        HttpClient Http = new HttpClient();
        var response = await Http.GetAsync("http://localhost:54859/api/getallcategories");

        if (response.StatusCode == HttpStatusCode.OK)
        {
            categories = await response.Content.ReadAsAsync<List<ProductCategory>>();
        }

        else if (response.StatusCode == HttpStatusCode.NoContent)
        {

        }

        // Error case. Only for testing.
        else
        {
            throw new Exception();
        }
    }

    private async Task SelectedStore(int id)
    {
        foreach (Store s in stores)
        {
            if (s.Id == id)
            {
                displayedInfo = s;
                break;
            }
        }

        await GetSelectedStoresData();

        if (action == 0)
        {
            await JS.InvokeVoidAsync("deleteCharts");
            ProductChart();
        }

    }

    private async Task GetSelectedStoresData()
    {
        HttpClient Http = new HttpClient();
        string json = JsonSerializer.Serialize(displayedInfo.Id);
        var response = await Http.GetAsync("http://localhost:54859/api/getstoresdata?storeid=" + displayedInfo.Id);
        Store data = await response.Content.ReadAsAsync<Store>();
        displayedInfo = data;
        this.StateHasChanged();
    }

    private async Task ChangeAction(int selected)
    {
        action = selected;

        if (action == 0)
        {
            await JS.InvokeVoidAsync("deleteCharts");
            ProductChart();
        }
    }

    private void CheckboxClicked(ProductCategory category, object checkedCategory)
    {
        if ((bool)checkedCategory)
        {
            if (!newProductCategories.Contains(category))
            {
                newProductCategories.Add(category);
            }
        }

        else
        {
            if (newProductCategories.Contains(category))
            {
                newProductCategories.Remove(category);
            }

            else
            {
                throw new Exception();
            }
        }
    }

    private async Task AddNewProduct()
    {
        HttpClient Http = new HttpClient();
        NewProductToDb productToDb = new NewProductToDb
        {
            Store = displayedInfo.Id,
            Name = newProductName,
            InStock = newProductQuantity,
            Groups = newProductCategories,
            QuantityChanged = DateTime.Now
        };

        string json = JsonSerializer.Serialize(productToDb);
        var response = await Http.PostAsJsonAsync("http://localhost:54859/api/newproduct", json);
        NewProductToDb data = await response.Content.ReadAsAsync<NewProductToDb>();

        if (response.IsSuccessStatusCode)
        {
            await GetSelectedStoresData();
        }
    }

    private async Task TakeNewValue(string store, int productId, string productsName)
    {
        string elementsId = store + "+" + productId.ToString();

        string value = await JS.InvokeAsync<string>("TakeNewValue", elementsId);

        if (int.TryParse(value, out int newQuantity))
        {
            await ChangeProductsQuantity(productId, newQuantity, productsName);
        }

    }

    private async Task ChangeProductsQuantity(int productsId, int newQuantity, string productsName)
    {
        HttpClient Http = new HttpClient();

        ProductToBeChanged productToBeChanged = new ProductToBeChanged
        {
            StoresId = displayedInfo.Id,
            ProductsId = productsId,
            ProductsName = productsName,
            NewQuantity = newQuantity,
            QuantityChanged = DateTime.Now
        };

        string json = JsonSerializer.Serialize(productToBeChanged);
        var response = await Http.PutAsJsonAsync("http://localhost:54859/api/changeproductquantity", json);

        if (response.IsSuccessStatusCode)
        {

        }
    }

    private async Task RemoveProduct(int storesId, int productsId)
    {
        HttpClient Http = new HttpClient();

        var response = await Http.DeleteAsync($"http://localhost:54859/api/removeproduct/?id={storesId}&ide={productsId}");

        if (response.IsSuccessStatusCode)
        {

        }
    }

    private void ProductChart()
    {
        List<string> productNames = new List<string>();
        List<int> productCount = new List<int>();
        // Localization later to title
        string title = "Tuotteiden osuus kokonaismäärästä";

        foreach (Product product in displayedInfo.Products)
        {
            productNames.Add(product.Name);
            productCount.Add(product.InStock);
        }

        JS.InvokeVoidAsync("ProductChart", productNames, productCount, title);

        List<string> categoryNames = new List<string>();
        List<int> categoryCount = new List<int>();
        // Localization later to title
        title = "Tuotteita tuoteryhmässä";

        foreach (ProductCategory c in categories)
        {
            categoryNames.Add(c.Name);
            int count = 0;

            foreach (Product p in displayedInfo.Products)
            {
                foreach (ProductCategory pc in p.Groups)
                {
                    if (pc.Id == c.Id)
                    {
                        count++;
                    }
                }
            }

            categoryCount.Add(count);
        }

        JS.InvokeVoidAsync("CategoryChart", categoryNames, categoryCount, title);
    }
}